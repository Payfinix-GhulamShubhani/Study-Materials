
python --version
pip --version

create virtual env =============================================
Windows:
py -m venv myworld || virtualenv myenv
Unix/MacOS:
python venv myworld || virtualenv myenv

Windows:
myworld\Scripts\activate.bat  ||   .\myenv\Scripts\activate
Unix/MacOS:
source myworld/bin/activate

Install Django=================================================
Remember to install Django while you are in the virtual environment!
pip install Django
pip install djangorestframework
pip install django-cors-headers
pip install psycopg2
pip freeze 
django-admin --version

Django Create Project==========================================
django-admin startproject my_project_name
cd project_name

Create App=====================================================
py manage.py startapp members || py ya python 
from django.shortcuts import render
python manage.py makemigrations 
python manage.py migrate
py manage.py runserver  (127.0.0.1:8000) || python manage.py runserver 192.168.0.220:8000

views.py---------------------------------------------
from django.http import HttpResponse

def members(request):
    return HttpResponse("Hello world!")

//project level url----------------------------------
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('', include('members.urls')),   // connect project to app 
    path('', include('app_name.folder_name.file_name_urls')),
    path('admin/', admin.site.urls),
]

app lebel url----------------------------------------
from django.urls import path
from . import views

urlpatterns = [
    path('members/', views.members, name='members'),
]

Templates=====================================================
Create a templates folder inside the members folder, and create a HTML file named
 myfirst.html.

<!DOCTYPE html>
<html>
<body>

<h1>Hello World!</h1>
<p>Welcome to my first Django project!</p>

</body>
</html>

views.py update------------
from django.http import HttpResponse
from django.template import loader

def members(request):
  template = loader.get_template('myfirst.html')
  return HttpResponse(template.render())
Change Settings------------------
INSTALLED_APPS = [
....
'members',   || 'api',
'rest_framework',
'corsheaders',
]
ALLOWED_HOSTS = ["*"]
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    .......
]
DATABASES = {
   'default': {
       'ENGINE': 'django.db.backends.postgresql',
       'NAME': 'truereadlinkprod',
       'USER': 'proddb',
       'PASSWORD': 'Sujanix#123',
       'HOST': 'database-2.cluster-cnwt7lfswwdc.us-east-1.rds.amazonaws.com',
       'PORT': '5432',
   }
}
AUTH_USER_MODEL = 'api.UserManagement'

CORS_ORIGIN_ALLOW_ALL=True
PASSWORD_RESET_TIMEOUT=900

CORS_ALLOWED_ORIGINS = [

    "http://localhost:3000",

    "http://127.0.0.1:3000",

]




# JWT Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}


EMAIL_USER='sujanixprivatelimited@gmail.com'
EMAIL_PASS='thikmlveamenflzs'
EMAIL_FROM='ghulam.shubhani9909@gmail.com'

#Email Configuration

EMAIL_BACKEND="django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST="smtp.gmail.com"
EMAIL_PORT=587
EMAIL_HOST_USER=EMAIL_USER
EMAIL_HOST_PASSWORD=EMAIL_PASS
EMAIL_USE_TLS=True

py manage.py migrate
py manage.py runserver 192.168.0.219:8000     (192.168.0.219:8000/endpoint)
py manage.py runserver (127.0.0.1:8000/endpoint) default 

Django Models ========================================
Create Table (Model)----------------------
Open it, and add a Member table by creating a Member class, and describe the table fields in it:
from django.db import models
class Member(models.Model):
  firstname = models.CharField(max_length=255)
  lastname = models.CharField(max_length=255)
SQLite Database-----------------------------
When we created the Django project, we got an empty SQLite database.
It was created in the my_tennis_club root folder, and has the filename db.sqlite3.
Migrate-------------
py manage.py makemigrations members
Django creates a file describing the changes and stores the file in the /migrations/ folder:
#('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
py manage.py migrate
)(*&&*(  View SQL

Django Insert Data==============================================
py manage.py shell
>>>from members.models import Member
>>> Member.objects.all()
<QuerySet []>
A QuerySet is a collection of data from a database.
>>> member = Member(firstname='Emil', lastname='Refsnes')
>>> member.save()
>>> Member.objects.all().values()
<QuerySet [{'id': 1, 'firstname': 'Emil', 'lastname': 'Refsnes'}]>
Add Multiple Records----------------
>>> member1 = Member(firstname='Tobias', lastname='Refsnes')
>>> member2 = Member(firstname='Linus', lastname='Refsnes')
....
>>> members_list = [member1, member2,.......]
>>> for x in members_list:
>>>   x.save()

Django Update Data========================================
>>> from members.models import Member
>>> x = Member.objects.all()[4]
>>> x.firstname
>>> x.firstname = "Stalikken"
>>> x.save()
>>> Member.objects.all().values()

Django Delete Data==============================================
>>> from members.models import Member
>>> x = Member.objects.all()[5]
let check by >>> x.firstname
>>> x.delete()
(1, {'members.Member': 1})

Django Update Model=================================================
phone = models.IntegerField()
  joined_date = models.DateField()
This is a change in the Model's structure, and therefor we have to make a migration to tell Django that it has to update the database:
py manage.py makemigrations members




















