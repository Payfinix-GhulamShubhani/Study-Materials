

Python Syntax--------------------------------
Python syntax can be executed by writing directly in the Command Line:

>>> print("Hello, World!")
Hello, World!
Or by creating a python file on the server, using the .py file extension, and running it in the Command Line:

C:\Users\Your Name>python myfile.py
Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.

Python uses indentation to indicate a block of code
Python will give you an error if you skip the indentation:
The number of spaces is up to you as a programmer, the most common use is four, but it has to be at least one.
You have to use the same number of spaces in the same block of code, otherwise Python will give you an error  (IndentationError: unexpected indent)

Python Comments============================================
Comments start with a #, and Python will render the rest of the line as a comment:
Comments can be used to explain Python code.
Comments can be used to make the code more readable.
Comments can be used to prevent execution when testing code.

Comments starts with a #, and Python will ignore them
Comments can be placed at the end of a line, and Python will ignore the rest of the line

Multiline Comments-------------------------------------------
Python does not really have a syntax for multiline comments.

To add a multiline comment you could insert a # for each line
Since Python will ignore string literals that are not assigned to a variable, you can add a multiline string (triple quotes) in your code, and place your comment inside it:
"""
This is a comment
written in
more than just one line
"""
print("Hello, World!")
Python Variables======================================================
Variables are containers for storing data values.
Creating Variables-------------------------------
Python has no command for declaring a variable.

A variable is created the moment you first assign a value to it.

Casting-------------------------------
If you want to specify the data type of a variable, this can be done with casting.
x = str(3)    # x will be '3'
y = int(3)    # y will be 3
z = float(3)  # z will be 3.0

You can get the data type of a variable with the type() function.
y = "John"
print(type(y))

Single or Double Quotes?
String variables can be declared either by using single or double quotes

a = 4
A = "Sally"
#A will not overwrite a

Variable Names=================================================
A variable name must start with a letter or the underscore character
A variable name cannot start with a number
A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
Variable names are case-sensitive (age, Age and AGE are three different variables)

Multi Words Variable Names-----------------
Variable names with more than one word can be difficult to read.
There are several techniques you can use to make them more readable:
Camel Case--------------------------
Each word, except the first, starts with a capital letter
myVariableName = "John"
Pascal Case-------------
Each word starts with a capital letter:
MyVariableName = "John"
Snake Case-------------------
Each word is separated by an underscore character:
my_variable_name = "John"

Assign Multiple Values==============================================
x, y, z = "Orange", "Banana", "Cherry"
Note: Make sure the number of variables matches the number of values, or else you will get an error.
x = y = z = "Orange"
Unpack a Collection
If you have a collection of values in a list, tuple etc. Python allows you to extract the values into variables. This is called unpacking.
Unpack a list:
fruits = ["apple", "banana", "cherry"]
x, y, z = fruits
print-----------------------------
x = "Python "
y = "is "
z = "awesome"
print(x + y + z)
Notice the space character after "Python " and "is ", without them the result would be "Pythonisawesome".
print(x, y, z)
In the print() function, when you try to combine a string and a number with the + operator, Python will give you an error:
x = 5
y = "John"
print(x + y)  ❎
print(x, y)   ✅
Global Variables=============================================
Variables that are created outside of a function (as in all of the examples above) are known as global variables.

Global variables can be used by everyone, both inside of functions and outside.
Also, use the global keyword if you want to change a global variable inside a function
To change the value of a global variable inside a function, refer to the variable by using the global keyword:
x = "awesome"
def myfunc():
  global x
  x = "fantastic"
myfunc()
print("Python is " + x)

Python Data Types=====================================






























